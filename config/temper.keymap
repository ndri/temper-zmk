/*
 * https://github.com/zmkfirmware/zmk/blob/main/app/include/dt-bindings/zmk/keys.h
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <locale/keys_et.h>

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/36.h"

#define BASE 0
#define SYM1 1
#define SYM2 2
#define NAV 3
#define MISC 4

#define XXX &none
#define ___ &trans

#define QUICK_TAP_MS 175

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2

// ZMK_HOLD_TAP(hml,
//     flavor = "balanced";
//     tapping-term-ms = <280>;
//     require-prior-idle-ms = <150>;
//     hold-trigger-key-positions = <KEYS_R THUMBS>;
//     hold-trigger-on-release;
//     bindings = <&kp>, <&kp>;
// )

// ZMK_HOLD_TAP(hmr,
//     flavor = "balanced";
//     tapping-term-ms = <280>;
//     require-prior-idle-ms = <150>;
//     hold-trigger-key-positions = <KEYS_L THUMBS>;
//     hold-trigger-on-release;
//     bindings = <&kp>, <&kp>;
// )

#define HRML(k1, k2, k3, k4) &mt LCTRL k1 &mt LALT k2 &mt LSHIFT k3 &mt LGUI k4
#define HRMR(k1, k2, k3, k4) &mt RGUI k1 &mt RSHIFT k2 &mt LALT k3 &mt RCTRL k4

// ---------- SETTINGS ----------

// ----------- COMBOS -----------

// ----------- KEYMAP -----------

ZMK_LAYER(default_layer,
// --------------------------------------------------------------------------------------------------------------------
// |    Q    |    W    |    F    |    P    |    B    |              |    J    |    L    |    U    |    Y    |    Ü    |
// |    A    |    R    |    S    |    T    |    G    |              |    M    |    N    |    E    |    I    |    O    |
// |    Z    |    X    |    C    |    D    |    V    |              |    K    |    H    |    Õ    |    Ä    |    Ö    |
//                     |   ESC   |  SPACE  |   TAB   |              |  ENTER  |  BCKSP  |   DEL   |
    &kp Q     &kp W     &kp F        &kp P     &kp B                 &kp J         &kp L    &kp U          &kp Y           &kp ET_U_UMLAUT
   HRML(A,        R,        S,           T)    &kp G                 &kp M        HRMR(N,       E,             I,              O)
    &kp Z     &kp X     &kp C        &kp D     &kp V                 &kp K         &kp H    &kp ET_O_TILDE &kp ET_A_UMLAUT &kp ET_O_UMLAUT
                        &lt SYM1 ESC &kp SPACE &lt MISC TAB          &lt NAV ENTER &kp BSPC &lt SYM2 DEL
)

ZMK_LAYER(symbols1_layer,
// --------------------------------------------------------------------------------------------------------------------
// |    1    |    2    |    3    |    4    |    5    |              |    6    |    7    |    8    |    9    |    0    |
// |    /    |    *    |    |    |    ^    |    \    |              |    ?    |    !    |    ,    |    .    |    -    |
// |    %    |    #    |    &    |    @    |    ~    |              |    +    |    =    |    ;    |    :    |    _    |
//                     |         |         |         |              |         |         |         |
    &kp N1      &kp N2      &kp N3           &kp N4       &kp N5           &kp N6       &kp N7       &kp N8       &kp N9       &kp N0
    &kp ET_FSLH &kp ET_STAR &kp LA(ET_TILDE) &kp ET_CARET &kp ET_BSLH      &kp ET_QMARK &kp EXCL     &kp COMMA    &kp DOT      &kp ET_MINUS
    &kp PRCNT   &kp HASH    &kp ET_AMPS      &kp ET_AT    &kp ET_GT        &kp ET_PLUS  &kp ET_EQUAL &kp ET_SEMI  &kp ET_COLON &kp ET_UNDER
                            &kp ___          &kp ___      &kp ___          &kp ___      &kp ___      &kp ___
)

ZMK_LAYER(symbols2_layer,
// --------------------------------------------------------------------------------------------------------------------
// |         |         |         |         |         |              |         |         |         |         |         |
// |    (    |    )    |    [    |    ]    |    $    |              |         |         |         |         |         |
// |    <    |    >    |    {    |    }    |    €    |              |         |         |    '    |    "    |    `    |
//                     |         |         |         |              |         |         |         |
    &kp ___      &kp ___      &kp ___     &kp ___     &kp ___         &kp ___ &kp ___ &kp ___    &kp ___    &kp ___
    &kp ET_LPAR  &kp ET_RPAR  &kp ET_LBKT &kp ET_RBKT &kp ET_DLLR     &kp ___ &kp ___ &kp ___    &kp ___    &kp ___
    &kp ET_CARON &kp ET_TILDE &kp ET_LBRC &kp ET_RBRC &kp ET_CURREN   &kp ___ &kp ___ &kp ET_SQT &kp ET_DQT &kp LA(ET_ACUTE)
                              &kp ___     &kp ___     &kp ___         &kp ___ &kp ___ &kp ___
)

ZMK_LAYER(nav_layer,
// --------------------------------------------------------------------------------------------------------------------
// |   F1    |   F2    |   F3    |   F4    |         |              |         |  Cmd+←  | Page dn | Page up |  Cmd+→  |
// |   F5    |   F6    |   F7    |   F8    |         |              |         |    ←    |    ↓    |    ↑    |    →    |
// |   F9    |   F10   |  F11    |  F12    |         |              |         |   Home  |  Ctrl+← |  Ctrl+→ |   End   |
//                     |         |         |         |              |         |         |         |
   &kp F1    &kp F2    &kp F3    &kp F4    &kp ___                  &kp ___ &kp LG(LEFT) &kp PG_DN    &kp PG_UP     &kp LG(RIGHT)
   &kp F5    &kp F6    &kp F7    &kp F8    &kp ___                  &kp ___ &kp LEFT     &kp DOWN     &kp UP        &kp RIGHT
   &kp F9    &kp F10   &kp F11   &kp F12   &kp ___                  &kp ___ &kp HOME     &kp LC(LEFT) &kp LC(RIGHT) &kp END
                       &kp ___   &kp ___   &kp ___                  &kp ___ &kp ___      &kp ___
)

ZMK_LAYER(test_layer,
    &kp ET_LBRC &kp ET_PIPE &kp ET_RBRC  &kp ET_TILDE &kp ET_POUND_SIGN   &kp ET_CURREN &kp ET_SECT &kp ET_ACUTE &kp ET_FRAC_1_2 &kp ET_CARON
    &kp ET_EURO &kp ET_DQT  &kp ET_HASH  &kp ET_DLLR  &kp ET_PRCNT        &kp ET_SQT    &kp ET_LPAR &kp ET_RPAR  &kp ET_LT       &kp ET_GT
    &kp ET_LBKT &kp ET_RBKT &kp ET_GRAVE &kp ET_TILDE &kp TILDE           &kp TILDE2    &kp NUHS    &kp KP_PLUS  &kp KP_MINUS    &kp KP_EQUAL
                            &kp ___      &kp ___      &kp ___             &kp ___       &kp ___     &kp ___
)

// ZMK_LAYER(new_layer,
// // --------------------------------------------------------------------------------------------------------------------
// // |         |         |         |         |         |              |         |         |         |         |         |
// // |         |         |         |         |         |              |         |         |         |         |         |
// // |         |         |         |         |         |              |         |         |         |         |         |
// //                     |         |         |         |              |         |         |         |
//     &kp ___ &kp ___ &kp ___ &kp ___ &kp ___                           &kp ___ &kp ___ &kp ___ &kp ___ &kp ___
//     &kp ___ &kp ___ &kp ___ &kp ___ &kp ___                           &kp ___ &kp ___ &kp ___ &kp ___ &kp ___
//     &kp ___ &kp ___ &kp ___ &kp ___ &kp ___                           &kp ___ &kp ___ &kp ___ &kp ___ &kp ___
//                     &kp ___ &kp ___ &kp ___                           &kp ___ &kp ___ &kp ___
// )
